/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package compilador;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/**
 *
 * @author Sergio
 */
public class AnalisadorSintatico extends javax.swing.JFrame {

    /**
     * Creates new form AnalisadorSintatico
     * @throws java.io.FileNotFoundException
     */
    
    BufferedReader reader;
    AnalisadorLexical lexico;
    File file;
    Token token;
    Simbolo simbolo;
    int nivel;
    LinkedList<Simbolo> tabSimb = new LinkedList<Simbolo>();
    LinkedList<Simbolo> expressao = new LinkedList<Simbolo>();
    LinkedList<Simbolo> pos;
    int PosMemoria = 0;
    int rotulo;
    int qtdRemovida = 0;
    private LinkedList<Simbolo> pilha;
    int topo = 0;
    String comando = null;
    private int qtdVar;
    private boolean flag;
    private LinkedList<Simbolo> posFixa;
    private Token aux;

            
    public AnalisadorSintatico() throws FileNotFoundException, IOException {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jButton1.setText("Compilar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        jMenuItem1.setText("Abrir arquivo");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Salvar arquivo");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(116, 116, 116))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(71, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        try {
            analisadorSintatico();
        } catch (IOException ex) {
            Logger.getLogger(AnalisadorSintatico.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        JFileChooser choice = new JFileChooser();
        int option = choice.showOpenDialog(null);
        
        if(JFileChooser.APPROVE_OPTION == option){
            
            file = choice.getSelectedFile();
            FileReader read = null;
            try {
                read = new FileReader(file);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(AnalisadorSintatico.class.getName()).log(Level.SEVERE, null, ex);
            }
            reader = new BufferedReader(read);
            int i = 0;
            String line = "";
            
            try {
                while(reader.ready()){
                    line += i;
                    line += "     ";
                    line += reader.readLine();
                    line += "\n";
                    i++;
                }
            } catch (IOException ex) {
                Logger.getLogger(AnalisadorSintatico.class.getName()).log(Level.SEVERE, null, ex);
            }
            jTextArea1.setText(line);
        }
        try {
            lexico = new AnalisadorLexical(file);
        } catch (IOException ex) {
            Logger.getLogger(AnalisadorSintatico.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed

        // TODO add your handling code here:
        
        try {
            BufferedWriter saida = new BufferedWriter(new FileWriter("C://Users//sergio.junior//Desktop/Codigo.txt"));
            saida.write(comando);
            saida.close();
        } catch (IOException e) {
            System.out.println("Erro ao gravar o arquivo\n");
        }
        
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AnalisadorSintatico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AnalisadorSintatico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AnalisadorSintatico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AnalisadorSintatico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new AnalisadorSintatico().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(AnalisadorSintatico.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables

    private void analisadorSintatico() throws IOException {
        
        token = lexico.getToken();
        
        if("Sprograma".equals(token.getSimbolo())){
            
            nivel = 0;
            token = lexico.getToken();
            
            //Geracao
            comando = "    " + "START   " + "    " + "    " + "\n";
            
            if("Sidentificador".equals(token.getSimbolo())){
                
                //SEMANTICO
                insertTab(token.getLexema(), "nomedeprograma", nivel);
                token = lexico.getToken();
                
                if("Sponto_virgula".equals(token.getSimbolo())){
                    analisaBloco();

                    if("Sponto".equals(token.getSimbolo())){
                        imprimirTabSimb();
                        qtdRemovida = removerVarPro();
                        
                        //Geracao
                        if (qtdRemovida > 0) {
                            topo = topo - qtdRemovida;
                            PosMemoria = PosMemoria - qtdRemovida;
                            comando = comando + "    " + "DALLOC  " + topo + "   " + qtdRemovida + "   " + "\n";
                        }

                        comando = comando + "    " + "HLT     " + "    " + "    " + "\n";
                        
                        jTextArea2.setText("Compilado com sucesso.");
                        System.out.println("\n\n");
                    }else
                        jTextArea2.setText("Erro linha" + lexico.getLinha() + ":'.' esperado.");
                }else
                    jTextArea2.setText("Erro linha" + lexico.getLinha() + ":';' esperado.");
            }else
                jTextArea2.setText("Erro linha:" + lexico.getLinha() + ":Identificador esperado.");
        }else
            jTextArea2.setText("Erro linha:" + lexico.getLinha() + ":Palavra reservada 'programa' esperada.");
    }

    private void analisaBloco() throws IOException {
        
        token = lexico.getToken();
        
        analisaEtVariaveis();
        analisaSubRotinas();
        analisaComandos();
    }

    private void analisaEtVariaveis() throws IOException {
        
        if("Svar".equals(token.getSimbolo())){
            
            token = lexico.getToken();
            
            if("Sidentificador".equals(token.getSimbolo())){
                
                while("Sidentificador".equals(token.getSimbolo())){
                    analisaVariaveis();
                    if("Sponto_virgula".equals(token.getSimbolo()))
                        token = lexico.getToken();
                    else
                        jTextArea2.setText("Erro linha" + lexico.getLinha() + ":';' esperado.");
                }
            }else
                jTextArea2.setText("Erro linha:" + lexico.getLinha() + ":Identificador esperado.");
        }
    }

    private void analisaVariaveis() throws IOException {
        
        do{
            if("Sidentificador".equals(token.getSimbolo())){
                
                //SEMANTICO
                if(pesquisaDuplicVar(token.getLexema(), nivel))
                    jTextArea2.setText("Erro linha:" + lexico.getLinha() + ": Variavel de mesmo nome declarada.");
                else{
                    insertTab(token.getLexema(), "variavel", nivel);
                    token = lexico.getToken();
                    qtdVar++;
                    if("Svirgula".equals(token.getSimbolo()) || "Sdoispontos".equals(token.getSimbolo())){

                        if("Svirgula".equals(token.getSimbolo())){
                            token = lexico.getToken();

                            if("Sdoispontos".equals(token.getSimbolo()))
                                jTextArea2.setText("Erro linha:" + lexico.getLinha() + "':' nao esperado.");
                        }
                    }else
                        jTextArea2.setText("Erro linha:" + lexico.getLinha() + ":',' ou ':' esperado.");
                }
            }else
                jTextArea2.setText("Erro linha:" + lexico.getLinha() + ":Identificador esperado.");
        }while(!"Sdoispontos".equals(token.getSimbolo()));
        
        //Geracao
        comando = comando + "    " + "ALLOC    " + topo + "   " + qtdVar + "   " + "\n";

        topo = qtdVar + topo;
        qtdVar = 0;
        
        token = lexico.getToken();
        analisaTipo();
    }

    private void analisaTipo() throws IOException {
        
        if((!"Sinteiro".equals(token.getSimbolo())) && (!"Sbooleano".equals(token.getSimbolo())))
            jTextArea2.setText("Erro linha:" + lexico.getLinha() + ":Tipo nao suportado."); 
        
        else
            colocaTipo(token.getSimbolo());
 
        token = lexico.getToken();
    }

    private void analisaSubRotinas() throws IOException {
        
        int rotuloInicio = 0;
        flag = false;
        
        if("Sprocedimento".equals(token.getSimbolo()) || "Sfuncao".equals(token.getSimbolo())){
            
            //Geracao
            comando = comando + "    " + "JMP     " + "L" + rotulo + "    " + "    " + "\n";
            rotuloInicio = rotulo;
            rotulo = rotulo + 1;
            flag = true;
        }
        
        while("Sprocedimento".equals(token.getSimbolo()) || "Sfuncao".equals(token.getSimbolo())){
            
            //Geracao
            comando = comando + "L" + rotulo + "  NULL    " + "    " + "    " + "\n";
            
            if("Sprocedimento".equals(token.getSimbolo()))
                analisaDecProcedimento();
            else
                analisaDecFuncao();
            
            if("Sponto_virgula".equals(token.getSimbolo()))
                token = lexico.getToken();
            else
                jTextArea2.setText("Erro linha:" + lexico.getLinha() + ":';' esperado."); 
        }
        
        //Geracao
        if (flag)
            comando = comando + "L" + rotuloInicio + "  NULL    " + "    " + "    " + "\n";
    }

    private void analisaDecProcedimento() throws IOException {
        
        token = lexico.getToken();
        
        if("Sidentificador".equals(token.getSimbolo())){
            if(pesquisaDuplicVar(token.getLexema(), nivel))
                jTextArea2.setText("Erro linha:" + lexico.getLinha() + ":Variavel de mesmo nome declarado.");
            else{
                //SEMANTICO
                insertTab(token.getLexema(), "procedimento", nivel);
                
                rotulo = rotulo + 1;//Geracao
                
                colocaTipo("procedimento");
                
                token = lexico.getToken();
                
                if("Sponto_virgula".equals(token.getSimbolo())){
                    nivel += 1;
                    analisaBloco();
                    nivel -= 1;
                    qtdRemovida = removerVar(nivel);
                }else
                    jTextArea2.setText("Erro linha:" + lexico.getLinha() + ":';' esperado.");
            }
        }else
            jTextArea2.setText("Erro linha:" + lexico.getLinha() + ":Identificador esperado.");
            
    }

    private void analisaDecFuncao() throws IOException {
        
        token = lexico.getToken();
        //nivel = "L";
        
        if("Sidentificador".equals(token.getSimbolo())){
            
            if(pesquisaDuplicVar(token.getLexema(), nivel))
                jTextArea2.setText("Erro linha:" + lexico.getLinha() + ":Variavel de mesmo nome declarado.");
            else{
                //SEMANTICO
                insertTab(token.getLexema(), "funcao", nivel);
                
                token = lexico.getToken();
                
                if("Sdoispontos".equals(token.getSimbolo())){
                    
                    token = lexico.getToken();
                    
                    if("Sinteiro".equals(token.getSimbolo()) || "Sbooleano".equals(token.getSimbolo())){
                        //SEMANTICO
                        colocaTipo(token.getSimbolo());
                        
                        token = lexico.getToken();
                        
                        if("Sponto_virgula".equals(token.getSimbolo())){
                            //SEMANTICO
                            nivel += 1;
                            analisaBloco();
                            nivel -= 1;
                            qtdRemovida = removerVar(nivel);
                        }
                    }
                }else
                    jTextArea2.setText("Erro linha:" + lexico.getLinha() + ": ':' esperado.");
            }
        }else
            jTextArea2.setText("Erro linha:" + lexico.getLinha() + ":Identificador esperado.");
        //DESEMPILHA
    }

    private void analisaComandos() throws IOException {
        
        if("Sinicio".equals(token.getSimbolo())){
            
            token = lexico.getToken();
            analisaComandoSimples();
            
            while(!"Sfim".equals(token.getSimbolo())){
                
                if("Sponto_virgula".equals(token.getSimbolo())){
                    token = lexico.getToken();
                    
                    if(!"Sfim".equals(token.getSimbolo()))
                        analisaComandoSimples();
                }else
                    jTextArea2.setText("Erro linha:" + lexico.getLinha() + ":';' esperado.");
            }
            token = lexico.getToken();
        }else
            jTextArea2.setText("Erro linha:" + lexico.getLinha() + ":Palavra reservada 'inicio' esperada.");
    }

    private void analisaComandoSimples() throws IOException {
        
        switch (token.getSimbolo()) {
        case "Sidentificador":
            analisaAtribChProc();
            break;
        case "Sse":
            analisaSe();
            break;
        case "Senquanto":
            analisaEnquanto();
            break;
        case "Sleia":
            analisaLeia();
            break;
        case "Sescreva":
            analisaEscreva();
            break;
        default:
            analisaComandos();
            break;
        }
    }

    private void analisaAtribChProc() throws IOException {
        aux = token;
        
        token = lexico.getToken();
        
        if("Satribuicao".equals(token.getSimbolo()))
            analisaAtribuicao(aux);
        else
            chamadaProcedimento();
    }

    private void analisaLeia() throws IOException {
        
        token = lexico.getToken();
        
        if("Sabre_parenteses".equals(token.getSimbolo())){
            token = lexico.getToken();
            
            if("Sidentificador".equals(token.getSimbolo())){
                
                    Simbolo simb = getSimbolo(token.getLexema());
                    if("Sinteiro".equals(simb.getTipo())){
                        comando = comando + "    " + "RD      " + "    " + "    " + "\n";
                        comando = comando + "    " + "STR     " + simb.getEndereco() + "    " + "\n";
                    }else
                        jTextArea2.setText("Erro linha:" + lexico.getLinha() + ":Leia com tipo nao esperado.");
                    
                    token = lexico.getToken();
                    
                    if("Sfecha_parenteses".equals(token.getSimbolo()))
                        token = lexico.getToken();
                    else
                        jTextArea2.setText("Erro linha:" + lexico.getLinha() + ":')' esperado.");
            }else
                jTextArea2.setText("Erro linha:" + lexico.getLinha() + ":Identificador esperado.");
        }else
            jTextArea2.setText("Erro linha:" + lexico.getLinha() + ":'(' esperado.");
    }

    private void analisaEscreva() throws IOException {
        
        token = lexico.getToken();
        
        if("Sabre_parenteses".equals(token.getSimbolo())){
            token = lexico.getToken();
            
            if("Sidentificador".equals(token.getSimbolo())){
                
                Simbolo simb = getSimbolo(token.getLexema());
                if("Sinteiro".equals(simb.getTipo())){
                    comando = comando + "    " + "LDV     " + simb.getEndereco() + "    " + "\n";
                    comando = comando + "    " + "PRN     " + "    " + "    " + "\n";
                }else
                    jTextArea2.setText("Erro linha:" + lexico.getLinha() + ":Leia com tipo nao esperado.");

                token = lexico.getToken();
                
                if("Sfecha_parenteses".equals(token.getSimbolo()))
                    token = lexico.getToken();
                else
                    jTextArea2.setText("Erro linha:" + lexico.getLinha() + ":')' esperado.");
            }else
                jTextArea2.setText("Erro linha:" + lexico.getLinha() + ":Identificador esperado.");
        }else
            jTextArea2.setText("Erro linha:" + lexico.getLinha() + ":'(' esperado.");
    }

    private void analisaEnquanto() throws IOException {
        
        //Geracao
        int auxrot1, auxrot2;
        auxrot1 = rotulo;
        
        comando = comando + "L" + rotulo + "  NULL    " + "    " + "    " + "\n";
        
        rotulo = rotulo + 1;
        
        token = lexico.getToken();
        analisaExpressao();
        
        pos = posFixa();
        
        for(int i = 0; expressao.size() > 0;i++)
            expressao.removeFirst();
        
        removeParenteses();
        
        for(int i = 0;i<pos.size();i++)
            System.out.println(pos.get(i));
                
        gerarCodPosFixa();
        
        if("Sfaca".equals(token.getSimbolo())){
            
            //Geracao
            auxrot2 = rotulo;
            comando = comando + "    " + "JMPF    " + "L" + rotulo + "    " + "    " + "\n";
            rotulo = rotulo + 1;
            
            token = lexico.getToken();
            analisaComandoSimples();
            
            //Geracao
            comando = comando + "    " + "JMP      " + "L" + auxrot1 + "    " + "    " + "\n";
            comando = comando + "L" + auxrot2 + "  NULL    " + "    " + "    " + "\n";
        }
    }

    private void analisaSe() throws IOException {
        
        token = lexico.getToken();
        analisaExpressao();
        
        pos = posFixa();
        
        for(int i = 0; expressao.size() > 0;i++)
            expressao.removeFirst();
        
        removeParenteses();
        
        for(int i = 0;i<pos.size();i++)
            System.out.println(pos.get(i));
        
        gerarCodPosFixa();
        
        //Geracao
        int jmpf = this.rotulo;
        comando = comando + "    " + "JMPF    " + "L" + jmpf + "    " + "\n";
        rotulo = rotulo + 1;
        
        if("Sentao".equals(token.getSimbolo())){
            token = lexico.getToken();
            analisaComandoSimples();
            
            if("Ssenao".equals(token.getSimbolo())){
                
                //Geracao
                int jmp = this.rotulo;
                comando = comando + "    " + "JMP     " + "L" + jmp + "    " + "\n";
                rotulo = rotulo + 1;
                comando = comando + "L" + jmpf + "  NULL    " + "    " + "    " + "\n";
                //FIM Geracao
                
                token = lexico.getToken();
                analisaComandoSimples();
                
                //Geracao
                comando = comando + "L" + jmp + "  NULL    " + "    " + "    " + "\n";
            }else
                //Geracao
                comando = comando + "L" + jmpf + "  NULL    " + "    " + "    " + "\n";
        }else
            jTextArea2.setText("Erro linha:" + lexico.getLinha() + ":Palavra reservada 'entao' esperado.");
    }

    private void analisaExpressao() throws IOException {
        
        analisaExpressaoSimples();
        
        if("Smaior".equals(token.getSimbolo()) || "Smaiorig".equals(token.getSimbolo()) || "Sig".equals(token.getSimbolo()) || "Smenor".equals(token.getSimbolo()) || "Smenorig".equals(token.getSimbolo()) || "Sdif".equals(token.getSimbolo())){
            addExpressao(token.getLexema(), token.getSimbolo(), "4");//Semantico
            token = lexico.getToken();
            analisaExpressaoSimples();
        }
                   
    }

    private void analisaExpressaoSimples() throws IOException {
        
        if("Smais".equals(token.getSimbolo()) || "Smenos".equals(token.getSimbolo())){
            addExpressao(token.getLexema(), token.getSimbolo(), "0");//Semantico
            token = lexico.getToken();
        }
        analisaTermo();
        
        while("Smais".equals(token.getSimbolo()) || "Smenos".equals(token.getSimbolo()) || "Sou".equals(token.getSimbolo())){
            if("Sou".equals(token.getSimbolo()))
                addExpressao(token.getLexema(), token.getSimbolo(), "5");//Semantico
            else
                addExpressao(token.getLexema(), token.getSimbolo(), "3");//Semantico
            token = lexico.getToken();
            analisaTermo();
        }
    }

    private void analisaTermo() throws IOException {
        
        analisaFator();
        
        while("Smult".equals(token.getSimbolo()) || "Sdiv".equals(token.getSimbolo()) || "Se".equals(token.getSimbolo())){
            if("Se".equals(token.getSimbolo()))
                addExpressao(token.getLexema(), token.getSimbolo(), "5");//Semantico
            else
                addExpressao(token.getLexema(), token.getSimbolo(), "2");//Semantico
            token = lexico.getToken();
            analisaFator();
        }
    }

    private void analisaFator() throws IOException {
        
        if("Sidentificador".equals(token.getSimbolo())){
            String f = seFuncao(token.getSimbolo());
            
            if("funcao".equals(f))
                addExpressao(token.getLexema(), "funcao", "1");//Semantico
            else if ("procedimento".equals(f))
                jTextArea2.setText("Erro linha:" + lexico.getLinha() + ":procedimento dentro de expressao.");
            else
                addExpressao(token.getLexema(), token.getSimbolo(), "1");//Semantico
            
            analisaChamadaFuncao();
            token = lexico.getToken(); 
        }else{
            if("Snumero".equals(token.getSimbolo())){
                addExpressao(token.getLexema(), token.getSimbolo(), "1");//Semantico
                token = lexico.getToken();
            }
            else{
                if("Snao".equals(token.getSimbolo())){
                    addExpressao(token.getLexema(), token.getSimbolo(), "0");//Semantico
                    token = lexico.getToken();
                    analisaFator();
                }else{
                    if("Sabre_parenteses".equals(token.getSimbolo())){
                        addExpressao(token.getLexema(), token.getSimbolo(), "6");//Semantico
                        token = lexico.getToken();
                        analisaExpressao();
                        
                        if("Sfecha_parenteses".equals(token.getSimbolo())){
                            addExpressao(token.getLexema(), token.getSimbolo(), "7");//Semantico
                            token = lexico.getToken();
                        }
                        else
                            jTextArea2.setText("Erro linha:" + lexico.getLinha() + ":')' esperado.");
                    }else{
                        if("verdadeiro".equals(token.getLexema()) || "falso".equals(token.getLexema())){
                            addExpressao(token.getLexema(), token.getSimbolo(), "1");//Semantico
                            token = lexico.getToken();
                        }
                        else
                            jTextArea2.setText("Erro linha:" + lexico.getLinha() + "ERRO.");
                    }
                        
                }
                    
            }
        }
    }

    private void analisaAtribuicao(Token aux) throws IOException {
        
        Simbolo s = getSimbolo(aux.getLexema());
        
        token = lexico.getToken();
        analisaExpressao();
        pos = posFixa();
        
        for(int i = 0; expressao.size() > 0;i++)
            expressao.removeFirst();
        
        removeParenteses();
        
        gerarCodPosFixa();
        
        for(int i = 0;i<pos.size();i++)
            System.out.println(pos.get(i));
        
        if (!"funcao".equals(s.getEscopo()))
            comando = comando + "    " + "STR     " + s.getEndereco() + "    " + "\n";
        
    }

    private void chamadaProcedimento() {
        
        
    }

    private void analisaChamadaFuncao() {
        
        
    }

    private void insertTab(String lexema, String escopo, int nivel) {
        
        simbolo = new Simbolo();
        
        simbolo.setLexema(lexema);
        simbolo.setEscopo(escopo);
        simbolo.setNivel(nivel);
        simbolo.setPosProcFunc(rotulo);
        
        switch(escopo){
            
            case "nomedeprograma":
                simbolo.setTipo("programa");
                
            case "variavel":
                simbolo.setEndereco(PosMemoria);
                PosMemoria++;
        }   
        
        tabSimb.add(simbolo);
    }

    private boolean pesquisaDuplicVar(String lexema, int nivel) {
        
        boolean duplicado = false;

        for (int i = 0; i< tabSimb.size(); i++) {
            if ((lexema.equals(tabSimb.get(i).getLexema()) && tabSimb.get(i).getNivel() == nivel)) {
                duplicado = true;
                return duplicado;
            }            
        }
        
        return duplicado;
    }

    private void colocaTipo(String simbolo) {
        
        for (Simbolo tabSimb1 : tabSimb) {
            if (tabSimb1.getTipo() == null) {
                tabSimb1.setTipo(simbolo);
            }
        }
    }

    private void imprimirTabSimb() {
        System.out.println("\n\n");
        for (Simbolo tabSimb1 : tabSimb) {
            System.out.println(tabSimb1.getLexema() + " " + tabSimb1.getTipo() + " " + tabSimb1.getNivel());
        }
        System.out.println("\n\n");
    }

    private int removerVar(int nivel) {
        
        int i = tabSimb.size() - 1;
        qtdRemovida = 0;
        imprimirTabSimb();
        while(tabSimb.get(i).getNivel() > nivel){
            if("variavel".equals(tabSimb.get(i).getEscopo())){
                tabSimb.remove(i);
                qtdRemovida++;
            }else
                if(tabSimb.get(i).getNivel() > nivel && !"variavel".equals(tabSimb.get(i).getEscopo()))
                    tabSimb.remove(i);
            i--;
        }
        return qtdRemovida;
    }

    private int removerVarPro() {
        qtdRemovida = 0;
        imprimirTabSimb();
        while(tabSimb.size() > 0){
            if("variavel".equals(tabSimb.getFirst().getEscopo())){
                tabSimb.removeFirst();
                qtdRemovida++;
            }else
                tabSimb.removeFirst();
        }
        return qtdRemovida;
    }

    private Simbolo getSimbolo(String lexema) {
        
        Simbolo simb = null;
        int i = tabSimb.size() - 1;
        
        while(i>0){
            if(lexema.equals(tabSimb.get(i).getLexema())){
                simb = tabSimb.get(i);
                break;
            }
            i--;
        }
        
        return simb;
    }

    private String seFuncao(String token) {
        
        int i = 0;
        String retorna = null;

        while (i < tabSimb.size()) {
            if (token.equals(tabSimb.get(i).getLexema())) {
                retorna = tabSimb.get(i).getEscopo();
                i = tabSimb.size();
            }
            i++;
        }
        return retorna;

    }

    private void addExpressao(String lexema, String tipo, String peso) {
        
        Simbolo s = new Simbolo();

        s.setLexema(lexema);
        s.setTipo(tipo);

        if (null != peso)
            switch (peso) {
            case "0":
                s.setId(0);
                break;
            case "1":
                s.setId(1);
                break;
            case "2":
                s.setId(2);
                break;
            case "3":
                s.setId(3);
                break;
            case "4":
                s.setId(4);
                break;
            case "5":
                s.setId(5);
                break;
            case "6":
                s.setId(6);
                break;
            case "7":
                s.setId(7);
                break;
            case " ":
                s.setId(8);
                break;
        }
        

        expressao.add(s);

    }

    private LinkedList<Simbolo> posFixa() {
        posFixa = new LinkedList<Simbolo>();
        pilha = new LinkedList<Simbolo>();
        System.out.print("\n\n");
        for (Simbolo expressao1 : expressao) {
            System.out.print(expressao1.getLexema());
        }
        System.out.print("\n\n");
        
        Simbolo s;
    	int i = 0;

    	while (i < expressao.size()) {

            s = expressao.get(i);

            if (s.getId() == 1) {
                posFixa.add(s);
            }else if (s.getId() != -1) {
            while (pilha.size() > 0 && (s.getId() < pilha.getLast().getId()) && (s.getId() != 6)) {
                    posFixa.add(pilha.getLast());
                    pilha.removeLast();
            }
            pilha.addLast(s);
            }
            i++;
    	}

    	while (pilha.size() > 0) {
        	posFixa.add(pilha.getLast());
        	pilha.removeLast();
    	}
        
    	i = 0;
    	while (i < posFixa.size()) {
            System.out.println(posFixa.get(i).getLexema());
   	 
    	i++;
        }

        return posFixa;
    }

    private void removeParenteses() {
        
        int i = 0;
        while (i < pos.size()) {
            if ((pos.get(i).getId() == 6 && "Sabre_parenteses".equals(pos.get(i).getTipo())) || (pos.get(i).getId() == 7 && "Sfecha_parenteses".equals(pos.get(i).getTipo()))) {
                pos.remove(i);
                i--;
            }
            i++;
        }

        
    }

    private void gerarCodPosFixa() {
        
        int i;
        if (pos.size() == 1) {
            if ("Snumero".equals(pos.getFirst().getTipo()))
                comando = comando + "    " + "LDC     " + pos.getFirst().getLexema() + "  " + "    " + "\n";
            else if ("funcao".equals(pos.getFirst().getTipo())) {
                Simbolo s = getSimbolo(pos.getFirst().getLexema());
                comando = comando + "    " + "CALL    " + "L" + s.getPosProcFunc() + "  " + "    " + "\n";
            }else if ("procedimento".equals(pos.getFirst().getTipo())){
                Simbolo s = getSimbolo(pos.getFirst().getLexema());
                comando = comando + "    " + "CALL    " + "L" + s.getPosProcFunc() + "  " + "    " + "\n";
            } else if ("Sidentificador".equals(pos.getFirst().getTipo())) {
                Simbolo s = getSimbolo(pos.getFirst().getLexema());
                comando = comando + "    " + "LDV     " + s.getEndereco() + "  " + "    " + "\n";
            } else if ("Sverdadeiro".equals(pos.getFirst().getTipo()))
                comando = comando + "    " + "LDC     " + 1 + "  " + "    " + "\n";
            else if ("Sfalso".equals(pos.getFirst().getTipo()))
                comando = comando + "    " + "LDC     " + 0 + "  " + "    " + "\n";
        } else {
            i = 0;
            while (i < pos.size()) {
                if ("+".equals(pos.get(i).getLexema()) && pos.get(i).getId() == 3)
                    comando = comando + "    " + "ADD     " + "    " + "    " + "\n";
                else if ("-".equals(pos.get(i).getLexema()) && pos.get(i).getId() == 3)
                    comando = comando + "    " + "SUB     " + "    " + "    " + "\n";
                else if ("*".equals(pos.get(i).getLexema()) && pos.get(i).getId() == 2)
                    comando = comando + "    " + "MULT     " + "    " + "    " + "\n";
                else if ("div".equals(pos.get(i).getLexema()) && pos.get(i).getId() == 2)
                    comando = comando + "    " + "DIVI     " + "    " + "    " + "\n";
                else if ("<".equals(pos.get(i).getLexema()) && pos.get(i).getId() == 4)
                    comando = comando + "    " + "CME     " + "    " + "    " + "\n";
                else if ("<=".equals(pos.get(i).getLexema()) && pos.get(i).getId() == 4)
                    comando = comando + "    " + "CMEQ     " + "    " + "    " + "\n";
                else if (">".equals(pos.get(i).getLexema()) && pos.get(i).getId() == 4)
                    comando = comando + "    " + "CMA     " + "    " + "    " + "\n";
                else if (">=".equals(pos.get(i).getLexema()) && pos.get(i).getId() == 4)
                    comando = comando + "    " + "CMAQ     " + "    " + "    " + "\n";
                else if ("=".equals(pos.get(i).getLexema()) && pos.get(i).getId() == 4)
                    comando = comando + "    " + "CEQ     " + "    " + "    " + "\n";
                else if ("!=".equals(pos.get(i).getLexema()) && pos.get(i).getId() == 4)
                    comando = comando + "    " + "CDIF     " + "    " + "    " + "\n";
                else if ("e".equals(pos.get(i).getLexema()) && pos.get(i).getId() == 5)
                    comando = comando + "    " + "AND     " + "    " + "    " + "\n";
                else if ("ou".equals(pos.get(i).getLexema()) && pos.get(i).getId() == 5)
                    comando = comando + "    " + "OR      " + "    " + "    " + "\n";
                else if ("nao".equals(pos.get(i).getLexema()) && pos.get(i).getId() == 0)
                    comando = comando + "    " + "NEG     " + "    " + "    " + "\n";
                else if ("-".equals(pos.get(i).getLexema()) && pos.get(i).getId() == 0)
                    comando = comando + "    " + "INV     " + "    " + "    " + "\n";
                else if ("+".equals(pos.get(i).getLexema()) && pos.get(i).getId() == 0)
                    comando = comando + "    " + "INV     " + "    " + "    " + "\n";
                else if ("Sidentificador".equals(pos.get(i).getTipo())){
                    Simbolo s = getSimbolo(pos.get(i).getLexema());
                    comando = comando + "    " + "LDV     " + s.getEndereco() + "  " + "    " + "\n";
                } else if ("Snumero".equals(pos.get(i).getTipo()))
                    comando = comando + "    " + "LDC     " + pos.get(i).getLexema() + "  " + "    " + "\n";
                else if ("funcao".equals(pos.get(i).getTipo())){
                    Simbolo s = getSimbolo(pos.get(i).getLexema());
                    comando = comando + "    " + "CALL    " + "L" + s.getPosProcFunc() + "  " + "    " + "\n";
                } else if ("Sverdadeiro".equals(pos.get(i).getTipo()))
                    comando = comando + "    " + "LDC     " + 1 + "  " + "    " + "\n";
                else if ("Sfalso".equals(pos.get(i).getTipo()))
                    comando = comando + "    " + "LDC     " + 0 + "  " + "    " + "\n";
                i++;
            }
        }
    }


    
}
